image: debian:12-slim

# Build with GCC / G++.
build_gcc:
  stage: build
  before_script:
    - apt-get update && apt-get -y install catch2 cmake g++ pkg-config
    - export CC=gcc && export CXX=g++
  script:
    - mkdir ./build
    - cd ./build
    - cmake ../
    - make -j4
    - ctest -V

# Build with Clang / Clang++.
build_clang:
  stage: build
  before_script:
    - apt-get update && apt-get -y install catch2 clang cmake pkg-config
    - export CC=clang && export CXX=clang++
  script:
    - mkdir ./build
    - cd ./build
    - cmake ../
    - make -j4
    - ctest -V

# Code coverage
coverage:
  stage: build
  before_script:
    - apt-get update && apt-get -y install catch2 cmake g++ lcov pkg-config
    - export CC=gcc && export CXX=g++
  script:
    # build
    - export CXX=g++
    - export CC=gcc
    - mkdir build-coverage
    - cd build-coverage
    - cmake -DCODE_COVERAGE=ON ../
    - make -j4
    # tests
    - ctest -V
    # collect code coverage data
    - lcov -c --directory . --output-file main_coverage.info
    - lcov --remove main_coverage.info '/usr/*' '*tests/*' '*third-party/*' -o main_coverage_filtered.info
    - genhtml main_coverage_filtered.info --output-directory ../public
  coverage: /^[\t ]*lines\.*:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    paths:
      - public

pages:
  image: debian:12-slim
  stage: deploy
  needs: ["coverage"]
  dependencies:
  - coverage
  script:
    - ls -l
  artifacts:
    paths:
      - public
